<snippet>
    <content><![CDATA[

typedef unsigned long long ull;
vector<int> pow1{1};
vector<ull> pow2{1};
vector<int> s_pref1{0};
vector<ull> s_pref2{0};
// -----------------------------------------------------------------------------
bool is_prime(int n) {
    for (int i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            return false;
        }
    }
    return n > 1;
}
// -----------------------------------------------------------------------------
int next_prime(int number, int steps = 1) {
    while (steps--) {
        while (!is_prime(++number));
    }
    return number;
}
// -----------------------------------------------------------------------------

ll gethash(string s) {
    // max(si)< base < m such that gcd(p, m) = 1

    // left to right
    // pref(k+1) = pref(k)*p + ak
    // prob of collision = 1-e^(-n**2/2m) where n is no of strings
    // for first m1 generate a odd number(becoz gcd(2^64, m1)=1) for second m2 use ull which is automatically 2^64 mod


    const int base = next_prime(256, std::rand() % 77 + 33);
    const int mod1 = next_prime(1e9, std::rand() % 77 + 33);
    const int n = (int)s.size();
    const int mxPow = n;

    // Calculation powers of base:
    for (int i = 1; i <= mxPow; ++i) {
        pow1.push_back(1LL * pow1.back() * base % mod1);
        pow2.push_back(pow2.back() * base);
    }

    // Find hashes on prefixes s and t:
    for (int i = 0; i < n; ++i) {
        // Hash modulo mod1:
        s_pref1.push_back((s_pref1.back() + 1LL * s[i] * pow1[i]) % mod1);

        // Hash modulo mod2 = 2^64:
        s_pref2.push_back(s_pref2.back() + s[i] * pow2[i]);

    }
}
// Polynomial hash of subsequence [pos, pos+len)
pair<int, ull> getsubseqhash()(int pos, int len, int mxPow = 0) {
    int hash1 = s_pref1[pos+len] - s_pref1[pos];
    ull hash2 = s_pref2[pos+len] - s_pref2[pos];
    if (hash1 < 0) hash1 += mod;
    if (mxPow != 0) {
        hash1 = 1LL * hash1 * pow1[mxPow-(pos+len-1)] % mod;
        hash2 *= pow2[mxPow-(pos+len-1)];
    }
    return make_pair(hash1, hash2);
}

]]></content>
    <tabTrigger>maths</tabTrigger>
    <scope>source.c++</scope>
</snippet>

