<snippet>
    <content><![CDATA[
template<typename T,typename TT> ostream& operator<<(ostream &s,pair<T,TT> t) {return s<<"("<<t.first<<","<<t.second<<")";}
#define debug(args...) { vector<string> _v = split(#args, ','); err(_v.begin(), args); }
vector<string> split(const string& s, char c) {
    vector<string> v;
    stringstream ss(s);
    string x;
    while (getline(ss, x, c))
        v.emplace_back(x);
    return move(v);
}
void err(vector<string>::iterator it) {cerr << endl;}
template<typename T, typename... Args>
void err(vector<string>::iterator it, T a, Args... args) {
    cerr << it -> substr((*it)[0] == ' ', it -> length()) << " = " << a << ", ";
    err(++it, args...);
}
#define debuga(a, n) {cerr << #a << " => ";for(int i=0;i<n;i++) cerr <<a[i]<<" \n"[i == (n-1)];}
#define debugv(x) {cerr << #x << " => ";for (auto ele: x)cerr << ele << " ";cerr << endl;}
template<typename T>
void debug2d(T mat,int n, int m) {rep(i,0,n-1) rep(j,0,m-1) cerr <<mat[i][j]<<" \n"[j == (m-1)]; cout<<endl; }
template<typename T>
void debug2dv(T v2) {for(auto v1: v2) debugv(v1);}
void tick(){static clock_t oldt;clock_t newt=clock();double diff=1.0*(newt-oldt)/CLOCKS_PER_SEC;oldt=newt;debug(diff);}
]]></content>
    <tabTrigger>debug</tabTrigger>
    <scope>source.c++</scope>
</snippet>

