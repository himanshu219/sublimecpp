<snippet>
    <content><![CDATA[
struct Trie{
    bool isWord;
    Trie* child[26];
    Trie() {
        isWord = false;
        memset(child, NULL, sizeof(child));
    }
};
void insert(Trie *root, string &ele){
    for(int i = 0; i < ele.size(); i++) {
        int pos = ele[i] - 'a';
        if(root -> child[pos] == NULL)
            root -> child[pos] = new Trie();

        root = root -> child[pos];

    }
    root -> isWord = true;
}
bool search(Trie *root, string &ele){
    for(int i = 0; i < ele.size(); i++) {
        int pos = ele[i] - 'a';
        if(root -> child[pos])
            root = root -> child[pos];
        else
            return false;
    }
    return root -> isWord;
}

// binary trie
typedef struct data
{
    data* bit[2];
    int cnt = 0;
}trie;

trie* head;

void insert(int x)
{
    trie* cur = head;
    for(int i=30;i>=0;i--)
    {
        int b = (x>>i) & 1;
        if(!cur->bit[b])
            cur->bit[b] = new trie();
        cur = cur->bit[b];
        cur->cnt++;
    }
}

void remove(int x)
{
    trie* cur = head;
    for(int i=30;i>=0;i--)
    {
        int b = (x>>i) & 1;
        cur = cur->bit[b];
        cur->cnt--;
    }
}

int maxxor(int x)
{
    trie* cur = head;
    int ans = 0;
    for(int i=30;i>=0;i--)
    {
        int b = (x>>i)&1;
        if(cur->bit[!b] && cur->bit[!b]->cnt>0)
        {
            ans += (1LL<<i);
            cur = cur->bit[!b];
        }
        else
            cur = cur->bit[b];
    }
    return ans;
}

// prefix count
int query(string &s){
    nodeptr curr = root;
    int ans = 0;
    for(int i = 0; i < sz(s); i++){
        int bx = s[i] - 'a';
        if(curr->child[bx] == NULL)
            return ans;
        curr = curr->child[bx];
    }
    return curr->cnt;
}
]]></content>
    <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>trie</tabTrigger>
    <!-- Optional: Set a scope to limit where the snippet will trigger -->
    <scope>source.c++</scope>
</snippet>
